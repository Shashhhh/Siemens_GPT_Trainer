{"version":3,"sources":["create-or-join.ts"],"names":["sharedWebSockets","ReadyState","attachListeners","attachSharedListeners","addSubscriber","removeSubscriber","hasSubscribers","createOrJoinSocket","webSocketRef","url","setReadyState","optionsRef","setLastMessage","startRef","reconnectCount","current","share","undefined","CONNECTING","WebSocket","protocols","options","readyState","subscriber","reconnect","onclose","close","e"],"mappings":"AACA,SAASA,gBAAT,QAAiC,WAAjC;AAEA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,cAHF,QAIO,sBAJP;AAMA,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,YADgC,EAEhCC,GAFgC,EAGhCC,aAHgC,EAIhCC,UAJgC,EAKhCC,cALgC,EAMhCC,QANgC,EAOhCC,cAPgC,KAQf;AACjB,MAAIH,UAAU,CAACI,OAAX,CAAmBC,KAAvB,EAA8B;AAC5B,QAAIhB,gBAAgB,CAACS,GAAD,CAAhB,KAA0BQ,SAA9B,EAAyC;AACvCP,MAAAA,aAAa,CAACT,UAAU,CAACiB,UAAZ,CAAb;AACAlB,MAAAA,gBAAgB,CAACS,GAAD,CAAhB,GAAwB,IAAIU,SAAJ,CACtBV,GADsB,EAEtBE,UAAU,CAACI,OAAX,CAAmBK,SAFG,EAGtBT,UAAU,CAACI,OAAX,CAAmBM,OAHG,CAAxB;AAKAlB,MAAAA,qBAAqB,CAACH,gBAAgB,CAACS,GAAD,CAAjB,EAAwBA,GAAxB,CAArB;AACD,KARD,MAQO;AACLC,MAAAA,aAAa,CAACV,gBAAgB,CAACS,GAAD,CAAhB,CAAsBa,UAAvB,CAAb;AACD;;AAED,UAAMC,UAAU,GAAG;AACjBX,MAAAA,cADiB;AAEjBF,MAAAA,aAFiB;AAGjBC,MAAAA,UAHiB;AAIjBG,MAAAA,cAJiB;AAKjBU,MAAAA,SAAS,EAAEX;AALM,KAAnB;AAQAT,IAAAA,aAAa,CAACK,GAAD,EAAMc,UAAN,CAAb;AACAf,IAAAA,YAAY,CAACO,OAAb,GAAuBf,gBAAgB,CAACS,GAAD,CAAvC;AAEA,WAAO,MAAM;AACXJ,MAAAA,gBAAgB,CAACI,GAAD,EAAMc,UAAN,CAAhB;;AACA,UAAI,CAACjB,cAAc,CAACG,GAAD,CAAnB,EAA0B;AACxB,YAAI;AACFT,UAAAA,gBAAgB,CAACS,GAAD,CAAhB,CAAsBgB,OAAtB,GAAgC,MAAM,CAAE,CAAxC;;AACAzB,UAAAA,gBAAgB,CAACS,GAAD,CAAhB,CAAsBiB,KAAtB;AACD,SAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;AACd,eAAO3B,gBAAgB,CAACS,GAAD,CAAvB;AACD;AACF,KATD;AAUD,GAlCD,MAkCO;AACLC,IAAAA,aAAa,CAACT,UAAU,CAACiB,UAAZ,CAAb;AACAV,IAAAA,YAAY,CAACO,OAAb,GAAuB,IAAII,SAAJ,CACrBV,GADqB,EAErBE,UAAU,CAACI,OAAX,CAAmBK,SAFE,EAGrBT,UAAU,CAACI,OAAX,CAAmBM,OAHE,CAAvB;AAMA,WAAOnB,eAAe,CACpBM,YAAY,CAACO,OADO,EAEpB;AACEH,MAAAA,cADF;AAEEF,MAAAA;AAFF,KAFoB,EAMpBC,UANoB,EAOpBE,QAAQ,CAACE,OAPW,EAQpBD,cARoB,CAAtB;AAUD;AACF,CA9DM","sourcesContent":["import type { MutableRefObject } from 'react';\r\nimport { sharedWebSockets } from './globals';\r\nimport type { Options, WebSocketEventMap } from './types';\r\nimport { ReadyState } from './constants';\r\nimport { attachListeners } from './attach-listener';\r\nimport { attachSharedListeners } from './attach-shared-listeners';\r\nimport {\r\n  addSubscriber,\r\n  removeSubscriber,\r\n  hasSubscribers,\r\n} from './manage-subscribers';\r\n\r\nexport const createOrJoinSocket = (\r\n  webSocketRef: MutableRefObject<WebSocket>,\r\n  url: string,\r\n  setReadyState: (readyState: ReadyState) => void,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setLastMessage: (message: WebSocketEventMap['message']) => void,\r\n  startRef: MutableRefObject<() => void>,\r\n  reconnectCount: MutableRefObject<number>\r\n): (() => void) => {\r\n  if (optionsRef.current.share) {\r\n    if (sharedWebSockets[url] === undefined) {\r\n      setReadyState(ReadyState.CONNECTING);\r\n      sharedWebSockets[url] = new WebSocket(\r\n        url,\r\n        optionsRef.current.protocols,\r\n        optionsRef.current.options\r\n      );\r\n      attachSharedListeners(sharedWebSockets[url], url);\r\n    } else {\r\n      setReadyState(sharedWebSockets[url].readyState);\r\n    }\r\n\r\n    const subscriber = {\r\n      setLastMessage,\r\n      setReadyState,\r\n      optionsRef,\r\n      reconnectCount,\r\n      reconnect: startRef,\r\n    };\r\n\r\n    addSubscriber(url, subscriber);\r\n    webSocketRef.current = sharedWebSockets[url];\r\n\r\n    return () => {\r\n      removeSubscriber(url, subscriber);\r\n      if (!hasSubscribers(url)) {\r\n        try {\r\n          sharedWebSockets[url].onclose = () => {};\r\n          sharedWebSockets[url].close();\r\n        } catch (e) {}\r\n        delete sharedWebSockets[url];\r\n      }\r\n    };\r\n  } else {\r\n    setReadyState(ReadyState.CONNECTING);\r\n    webSocketRef.current = new WebSocket(\r\n      url,\r\n      optionsRef.current.protocols,\r\n      optionsRef.current.options\r\n    );\r\n\r\n    return attachListeners(\r\n      webSocketRef.current,\r\n      {\r\n        setLastMessage,\r\n        setReadyState,\r\n      },\r\n      optionsRef,\r\n      startRef.current,\r\n      reconnectCount\r\n    );\r\n  }\r\n};\r\n"]}