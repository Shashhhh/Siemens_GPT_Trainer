{"version":3,"sources":["use-socket-io.ts"],"names":["emptyEvent","type","payload","getSocketData","event","data","match","JSON","parse","Array","isArray","useSocketIO","url","options","DEFAULT_OPTIONS","connect","optionsWithSocketIO","fromSocketIO","sendMessage","sendJsonMessage","lastMessage","readyState","getWebSocket","socketIOLastMessage","lastJsonMessage"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAQA,MAAMA,UAA+B,GAAG;AACtCC,EAAAA,IAAI,EAAE,OADgC;AAEtCC,EAAAA,OAAO,EAAE;AAF6B,CAAxC;;AAKA,MAAMC,aAAa,GAAIC,KAAD,IAA8D;AAClF,MAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACC,IAArB,EAA2B;AACzB,WAAOL,UAAP;AACD;;AAED,QAAMM,KAAK,GAAGF,KAAK,CAACC,IAAN,CAAWC,KAAX,CAAiB,OAAjB,CAAd;;AAEA,MAAI,CAACA,KAAL,EAAY;AACV,WAAON,UAAP;AACD;;AAED,QAAMK,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAb;;AAEA,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAD,IAAwB,CAACA,IAAI,CAAC,CAAD,CAAjC,EAAsC;AACpC,WAAOL,UAAP;AACD;;AAED,SAAO;AACLC,IAAAA,IAAI,EAAEI,IAAI,CAAC,CAAD,CADL;AAELH,IAAAA,OAAO,EAAEG,IAAI,CAAC,CAAD;AAFR,GAAP;AAID,CArBD;;AAuBO,MAAMM,WAAW,GAAG,CACzBC,GADyB,EAEzBC,OAAgB,GAAGC,0BAFM,EAGzBC,OAAgB,GAAG,IAHM,KAIc;AACvC,QAAMC,mBAAmB,GAAG,oBAAQ,OAAO,EACzC,GAAGH,OADsC;AAEzCI,IAAAA,YAAY,EAAE;AAF2B,GAAP,CAAR,EAGxB,EAHwB,CAA5B;AAKA,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA;AALI,MAMF,gCAEFV,GAFE,EAGFI,mBAHE,EAIFD,OAJE,CANJ;AAaA,QAAMQ,mBAAmB,GAAG,oBAAQ,MAClCpB,aAAa,CAACiB,WAAD,CADa,EACE,CAACA,WAAD,CADF,CAA5B;AAGA,SAAO;AACLF,IAAAA,WADK;AAELC,IAAAA,eAFK;AAGLC,IAAAA,WAAW,EAAEG,mBAHR;AAILC,IAAAA,eAAe,EAAED,mBAJZ;AAKLF,IAAAA,UALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAlCM","sourcesContent":["import { useMemo } from 'react'\r\nimport { useWebSocket } from './use-websocket'\r\nimport { DEFAULT_OPTIONS } from './constants'\r\nimport type { Options, WebSocketHook, WebSocketEventMap } from './types';\r\n\r\nexport interface SocketIOMessageData {\r\n  type: string,\r\n  payload: any,\r\n}\r\n\r\nconst emptyEvent: SocketIOMessageData = {\r\n  type: 'empty',\r\n  payload: null,\r\n}\r\n\r\nconst getSocketData = (event: WebSocketEventMap['message']): SocketIOMessageData => {\r\n  if (!event || !event.data) {\r\n    return emptyEvent\r\n  }\r\n\r\n  const match = event.data.match(/\\[.*]/)\r\n\r\n  if (!match) {\r\n    return emptyEvent\r\n  }\r\n\r\n  const data = JSON.parse(match)\r\n\r\n  if (!Array.isArray(data) || !data[1]) {\r\n    return emptyEvent\r\n  }\r\n\r\n  return {\r\n    type: data[0],\r\n    payload: data[1],\r\n  }\r\n}\r\n\r\nexport const useSocketIO = (\r\n  url: string | (() => string | Promise<string>) | null,\r\n  options: Options = DEFAULT_OPTIONS,\r\n  connect: boolean = true,\r\n): WebSocketHook<SocketIOMessageData> => {\r\n  const optionsWithSocketIO = useMemo(() => ({\r\n    ...options,\r\n    fromSocketIO: true,\r\n  }), [])\r\n\r\n  const {\r\n    sendMessage,\r\n    sendJsonMessage,\r\n    lastMessage,\r\n    readyState,\r\n    getWebSocket,\r\n  } = useWebSocket(\r\n\r\n    url,\r\n    optionsWithSocketIO,\r\n    connect,\r\n  );\r\n\r\n  const socketIOLastMessage = useMemo(() =>\r\n    getSocketData(lastMessage), [lastMessage]);\r\n\r\n  return {\r\n    sendMessage,\r\n    sendJsonMessage,\r\n    lastMessage: socketIOLastMessage,\r\n    lastJsonMessage: socketIOLastMessage,\r\n    readyState,\r\n    getWebSocket,\r\n  };\r\n}\r\n"]}