{"version":3,"sources":["use-websocket.ts"],"names":["useWebSocket","url","options","DEFAULT_OPTIONS","connect","lastMessage","setLastMessage","readyState","setReadyState","lastJsonMessage","JSON","parse","data","e","UNPARSABLE_JSON_OBJECT","convertedUrl","webSocketRef","startRef","reconnectCount","messageQueue","webSocketProxy","optionsCache","readyStateFromUrl","current","undefined","ReadyState","CONNECTING","UNINSTANTIATED","stringifiedQueryParams","queryParams","stringify","sendMessage","message","OPEN","send","push","sendJsonMessage","getWebSocket","share","removeListeners","expectClose","start","protectedSetLastMessage","protectedSetReadyState","state","prev","splice","forEach"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState, useCallback, useMemo, MutableRefObject } from 'react';\r\nimport { DEFAULT_OPTIONS, ReadyState, UNPARSABLE_JSON_OBJECT } from './constants';\r\nimport { createOrJoinSocket } from './create-or-join';\r\nimport { getUrl } from './get-url';\r\nimport websocketWrapper from './proxy';\r\nimport type {\r\n  Options,\r\n  ReadyStateState,\r\n  SendMessage,\r\n  SendJsonMessage,\r\n  WebSocketMessage,\r\n  WebSocketHook,\r\n  WebSocketEventMap,\r\n} from './types';\r\n\r\nexport const useWebSocket = (\r\n  url: string | (() => string | Promise<string>) | null,\r\n  options: Options = DEFAULT_OPTIONS,\r\n  connect: boolean = true,\r\n): WebSocketHook => {\r\n  const [lastMessage, setLastMessage] = useState<WebSocketEventMap['message']>({});\r\n  const [readyState, setReadyState] = useState<ReadyStateState>({});\r\n  const lastJsonMessage = useMemo(() => {\r\n    if (lastMessage) {\r\n      try {\r\n        return JSON.parse(lastMessage.data);\r\n      } catch (e) {\r\n        return UNPARSABLE_JSON_OBJECT;\r\n      }\r\n    }\r\n    return null;\r\n  }, [lastMessage]);\r\n  const convertedUrl = useRef<string>(\"\");\r\n  const webSocketRef = useRef<WebSocket | null>(null);\r\n  const startRef = useRef<() => void>(() => { });\r\n  const reconnectCount = useRef<number>(0);\r\n  const messageQueue = useRef<WebSocketMessage[]>([]);\r\n  const webSocketProxy = useRef<WebSocket | null>(null)\r\n  const optionsCache = useRef<Options>(options);\r\n\r\n  const readyStateFromUrl: ReadyState =\r\n    convertedUrl.current && readyState[convertedUrl.current] !== undefined ?\r\n      readyState[convertedUrl.current] :\r\n      url !== null && connect === true ?\r\n        ReadyState.CONNECTING :\r\n        ReadyState.UNINSTANTIATED;\r\n\r\n  const stringifiedQueryParams = options.queryParams ? JSON.stringify(options.queryParams) : null;\r\n\r\n  const sendMessage: SendMessage = useCallback(message => {\r\n    if (webSocketRef.current && webSocketRef.current.readyState === ReadyState.OPEN) {\r\n      webSocketRef.current.send(message);\r\n    } else {\r\n      messageQueue.current.push(message);\r\n    }\r\n  }, []);\r\n\r\n  const sendJsonMessage: SendJsonMessage = useCallback(message => {\r\n    sendMessage(JSON.stringify(message));\r\n  }, [sendMessage]);\r\n\r\n  const getWebSocket = useCallback((): WebSocket => {\r\n    if (optionsCache.current?.share !== true && null !== webSocketRef.current) {\r\n      return webSocketRef.current;\r\n    }\r\n\r\n    if (webSocketProxy.current === null && webSocketRef.current && startRef.current) {\r\n      webSocketProxy.current = websocketWrapper(webSocketRef.current, startRef);\r\n    } else {\r\n      return webSocketProxy.current as WebSocket;\r\n    }\r\n\r\n    return webSocketProxy.current;\r\n  }, [optionsCache]);\r\n\r\n  useEffect(() => {\r\n    if (url !== null && connect === true) {\r\n      let removeListeners: () => void;\r\n      let expectClose = false;\r\n\r\n      const start = async () => {\r\n        convertedUrl.current = await getUrl(url, optionsCache);\r\n\r\n        const protectedSetLastMessage = (message: WebSocketEventMap['message']) => {\r\n          if (!expectClose) {\r\n            setLastMessage(message);\r\n          }\r\n        };\r\n\r\n        const protectedSetReadyState = (state: ReadyState) => {\r\n          if (!expectClose) {\r\n            setReadyState(prev => ({\r\n              ...prev,\r\n              [convertedUrl.current]: state,\r\n            }));\r\n          }\r\n        };\r\n        removeListeners = createOrJoinSocket(\r\n          webSocketRef as MutableRefObject<WebSocket>,\r\n          convertedUrl.current,\r\n          protectedSetReadyState,\r\n          optionsCache,\r\n          protectedSetLastMessage,\r\n          startRef,\r\n          reconnectCount,\r\n        );\r\n      };\r\n\r\n      startRef.current = () => {\r\n        if (!expectClose) {\r\n          if (webSocketProxy.current) webSocketProxy.current = null;\r\n          removeListeners?.();\r\n          start();\r\n        }\r\n      };\r\n\r\n      start();\r\n      return () => {\r\n        expectClose = true;\r\n        if (webSocketProxy.current) webSocketProxy.current = null;\r\n        removeListeners?.();\r\n        setLastMessage({});\r\n      };\r\n    }else{\r\n      return;\r\n    }\r\n  }, [url, connect, stringifiedQueryParams, optionsCache, sendMessage]);\r\n\r\n  useEffect(() => {\r\n    if (readyStateFromUrl === ReadyState.OPEN) {\r\n      messageQueue.current.splice(0).forEach(message => {\r\n        sendMessage(message);\r\n      });\r\n    }\r\n  }, [readyStateFromUrl]);\r\n\r\n  return {\r\n    sendMessage,\r\n    sendJsonMessage,\r\n    lastMessage,\r\n    lastJsonMessage,\r\n    readyState: readyStateFromUrl,\r\n    getWebSocket,\r\n  };\r\n};\r\n"]}