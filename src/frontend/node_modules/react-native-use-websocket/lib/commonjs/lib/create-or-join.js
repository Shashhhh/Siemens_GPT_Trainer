"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOrJoinSocket = void 0;

var _globals = require("./globals");

var _constants = require("./constants");

var _attachListener = require("./attach-listener");

var _attachSharedListeners = require("./attach-shared-listeners");

var _manageSubscribers = require("./manage-subscribers");

const createOrJoinSocket = (webSocketRef, url, setReadyState, optionsRef, setLastMessage, startRef, reconnectCount) => {
  if (optionsRef.current.share) {
    if (_globals.sharedWebSockets[url] === undefined) {
      setReadyState(_constants.ReadyState.CONNECTING);
      _globals.sharedWebSockets[url] = new WebSocket(url, optionsRef.current.protocols, optionsRef.current.options);
      (0, _attachSharedListeners.attachSharedListeners)(_globals.sharedWebSockets[url], url);
    } else {
      setReadyState(_globals.sharedWebSockets[url].readyState);
    }

    const subscriber = {
      setLastMessage,
      setReadyState,
      optionsRef,
      reconnectCount,
      reconnect: startRef
    };
    (0, _manageSubscribers.addSubscriber)(url, subscriber);
    webSocketRef.current = _globals.sharedWebSockets[url];
    return () => {
      (0, _manageSubscribers.removeSubscriber)(url, subscriber);

      if (!(0, _manageSubscribers.hasSubscribers)(url)) {
        try {
          _globals.sharedWebSockets[url].onclose = () => {};

          _globals.sharedWebSockets[url].close();
        } catch (e) {}

        delete _globals.sharedWebSockets[url];
      }
    };
  } else {
    setReadyState(_constants.ReadyState.CONNECTING);
    webSocketRef.current = new WebSocket(url, optionsRef.current.protocols, optionsRef.current.options);
    return (0, _attachListener.attachListeners)(webSocketRef.current, {
      setLastMessage,
      setReadyState
    }, optionsRef, startRef.current, reconnectCount);
  }
};

exports.createOrJoinSocket = createOrJoinSocket;
//# sourceMappingURL=create-or-join.js.map